using iLand.tools;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Drawing;
using System.Linq;

namespace iLand.core
{
    /** Represents the input of various variables with regard to climate, soil properties and more.
        @ingroup tools
        Data is read from various sources and presented to the core model with a standardized interface.
        see http://iland.boku.ac.at/simulation+extent
        */
    internal class Environment
    {
        // ******** specific keys *******
        private const string SpeciesKey = "model.species.source";
        private const string ClimateKey = "model.climate.tableName";

        private bool mGridMode;
        private List<string> mKeys;
        private readonly Dictionary<string, int> mRowCoordinates;
        private readonly Dictionary<string, object> mCreatedObjects;
        private CsvFile mInfile;
        private GisGrid mGrid;

        public List<Climate> Climates { get; private set; } ///< created climates.
        public List<SpeciesSet> SpeciesSets { get; private set; } ///< created species sets
        public Climate CurrentClimate { get; private set; } ///< get climate at current pos
        public SpeciesSet CurrentSpeciesSet { get; private set; } ///< get species set on current pos
        public int CurrentID { get; private set; } ///< current grid id (in grid mode the id of the stand grid, in matrix mode simply the an autogenerated index)

        public bool IsSetup() { return mInfile != null; }
        public void SetDefaultValues(Climate climate, SpeciesSet speciesSet) { CurrentClimate = climate; CurrentSpeciesSet = speciesSet; }

        public Environment()
        {
            this.Climates = new List<Climate>();
            this.mCreatedObjects = new Dictionary<string, object>();
            this.CurrentClimate = null;
            this.CurrentID = 0;
            this.CurrentSpeciesSet = null;
            this.mGrid = null;
            this.mGridMode = false;
            this.mInfile = null;
            this.mRowCoordinates = new Dictionary<string, int>();
            this.SpeciesSets = new List<SpeciesSet>();
        }

        public bool LoadFromFile(string fileName)
        {
            string source = Helper.LoadTextFile(GlobalSettings.Instance.Path(fileName));
            if (String.IsNullOrEmpty(source))
            {
                throw new NotSupportedException(String.Format("Environment: input file does not exist or is empty ({0})", fileName));
            }
            return LoadFromString(source);
        }

        public bool LoadFromString(string source)
        {
            mInfile = new CsvFile();

            mInfile.LoadFromString(source);
            mKeys = mInfile.Captions;

            XmlHelper xml = GlobalSettings.Instance.Settings;
            SpeciesSets.Clear(); // note: the objects are not destroyed - potential memory leak.
            Climates.Clear();
            mRowCoordinates.Clear();
            mCreatedObjects.Clear();
            CurrentID = 0;

            int index;
            if (mGridMode)
            {
                int id = mInfile.GetColumnIndex("id");
                if (id < 0)
                {
                    throw new NotSupportedException(" (grid mode) input file has no 'id' column!");
                }
                for (int row = 0; row < mInfile.RowCount; row++)
                {
                    mRowCoordinates[mInfile.Value(row, id).ToString()] = row;
                }
            }
            else
            {
                // ***  Matrix mode ******
                // each row must contain 'x' and 'y' coordinates
                // setup coordinates (x,y)
                int ix, iy;
                ix = mInfile.GetColumnIndex("x");
                iy = mInfile.GetColumnIndex("y");
                if (ix < 0 || iy < 0)
                {
                    throw new NotSupportedException(" (matrix mode) input file has no x/y coordinates!");
                }
                for (int row = 0; row < mInfile.RowCount; row++)
                {
                    string key = String.Format("{0}_{1}", mInfile.Value(row, ix).ToString(), mInfile.Value(row, iy).ToString());
                    mRowCoordinates[key] = row;
                }
            }

            // ******** setup of Species Sets *******
            if ((index = mKeys.IndexOf(SpeciesKey)) > -1)
            {
                using DebugTimer t = new DebugTimer("environment:load species");
                List<string> speciesNames = mInfile.Column(index).Distinct().ToList();
                Debug.WriteLine("creating species sets: " + speciesNames);
                foreach (string name in speciesNames)
                {
                    xml.SetNodeValue(SpeciesKey, name); // set xml value
                    // create species sets
                    SpeciesSet set = new SpeciesSet();
                    SpeciesSets.Add(set);
                    mCreatedObjects[name] = (object)set;
                    set.Setup();
                }
                Debug.WriteLine(SpeciesSets.Count + " species sets created.");
            }
            else
            {
                // no species sets specified
                SpeciesSet speciesSet = new SpeciesSet();
                SpeciesSets.Add(speciesSet);
                speciesSet.Setup();
                CurrentSpeciesSet = speciesSet;
            }

            // ******** setup of Climate *******
            if ((index = mKeys.IndexOf(ClimateKey)) > -1)
            {
                using DebugTimer t = new DebugTimer("environment:load climate");
                List<string> climateNames = mInfile.Column(index).Distinct().ToList();
                if (GlobalSettings.Instance.LogDebug())
                {
                    Debug.WriteLine("creating climate: " + climateNames);
                }
                Debug.WriteLine("Environment: climate: # of climates in environment file:" + climateNames.Count);
                foreach (string name in climateNames)
                {
                    // create an entry in the list of created objects, but
                    // really create the climate only if required (see setPosition() )
                    mCreatedObjects[name] = null;
                    xml.SetNodeValue(ClimateKey, name); // set xml value
                }
            }
            else
            {
                // no climate defined - setup default climate
                Climate c = new Climate();
                Climates.Add(c);
                c.Setup();
                CurrentClimate = c;
            }
            if (CurrentClimate == null && Climates.Count > 0)
            {
                CurrentClimate = Climates[0];
            }
            if (CurrentSpeciesSet == null && SpeciesSets.Count > 0)
            {
                CurrentSpeciesSet = SpeciesSets[0];
            }
            return true;
        }

        /** sets the "pointer" to a "position" (metric coordinates).
            All specified values are set (also the climate/species-set pointers).
            */
        public void SetPosition(PointF position)
        {
            // no changes occur, when the "environment" is not loaded
            if (!IsSetup())
            {
                return;
            }

            int id = -1;
            int ix = -1;
            int iy = -1;
            string key;
            if (mGridMode)
            {
                // grid mode
                id = (int)mGrid.GetValue(position);
                CurrentID = id;
                key = id.ToString();
                if (id == -1)
                {
                    return; // no data for the resource unit
                }
            }
            else
            {
                // access data in the matrix by resource unit indices
                ix = (int)(position.X / 100.0); // suppose size of 1 ha for each coordinate
                iy = (int)(position.Y / 100.0);
                CurrentID++; // to have Ids for each resource unit

                key = String.Format("{0}_{1}", ix, iy);
            }

            if (mRowCoordinates.ContainsKey(key))
            {
                XmlHelper xml = GlobalSettings.Instance.Settings;
                int row = mRowCoordinates[key];
                string value;
                if (GlobalSettings.Instance.LogInfo())
                {
                    Debug.WriteLine("settting up point " + position + " with row " + row);
                }
                for (int col = 0; col < mInfile.ColCount; col++)
                {
                    if (mKeys[col] == "id")
                    {
                        CurrentID = Int32.Parse(mInfile.Value(row, col));
                        continue;
                    }
                    if (mKeys[col] == "x" || mKeys[col] == "y") // ignore "x" and "y" keys
                    {
                        continue;
                    }
                    value = mInfile.Value(row, col).ToString();
                    if (GlobalSettings.Instance.LogInfo())
                    {
                        Debug.WriteLine("set " + mKeys[col] + " to " + value);
                    }
                    xml.SetNodeValue(mKeys[col], value);
                    // special handling for constructed objects:
                    if (mKeys[col] == SpeciesKey)
                        CurrentSpeciesSet = (SpeciesSet)mCreatedObjects[value];
                    if (mKeys[col] == ClimateKey)
                    {
                        CurrentClimate = (Climate)mCreatedObjects[value];
                        if (CurrentClimate == null)
                        {
                            // create only those climate sets that are really used in the current landscape
                            Climate climate = new Climate();
                            Climates.Add(climate);
                            mCreatedObjects[value] = (object)climate;
                            climate.Setup();
                            CurrentClimate = climate;

                        }
                    }
                }
            }
            else
            {
                if (mGridMode)
                {
                    throw new NotSupportedException(String.Format("Environment:setposition: invalid grid id (or not present in input file): {0}m/{1}m (mapped to id {2}).",
                                 position.X, position.Y, id));
                }
                else
                {
                    throw new NotSupportedException(String.Format("Environment:setposition: invalid coordinates (or not present in input file): {0}m/{1}m (mapped to indices {2}/{3}).",
                                     position.X, position.Y, ix, iy));
                }
            }
        }

        public bool SetGridMode(string grid_file_name)
        {
            mGrid = new GisGrid();
            mGrid.LoadFromFile(grid_file_name);
            mGridMode = true;
            return true;
        }
    }
}
