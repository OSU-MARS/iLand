using iLand.Input.ProjectFile;
using iLand.Tools;
using iLand.Tree;
using iLand.World;
using System;
using System.Collections.Generic;
using System.Drawing;
using System.IO;
using System.Linq;

namespace iLand.Input
{
    /// <summary>
    /// Resource unit climates and soil properties plus a few other settings.
    /// </summary>
    /// <remarks>
    /// Data is read from various sources and presented to the core model with a standardized interface.
    //  See http://iland.boku.ac.at/simulation+extent.
    /// </remarks>
    public class EnvironmentReader
    {
        private bool isGridMode;
        private List<string>? columnNames;
        private CsvFile? resourceUnitEnvironmentFile;
        private readonly Dictionary<string, int> rowIndexByCoordinateOrID;

        public Dictionary<string, World.Climate> ClimatesByName { get; init; }
        public World.Climate? CurrentClimate { get; private set; }
        public int CurrentResourceUnitID { get; private set; } // current grid id (in grid mode the id of the stand grid, in matrix mode simply the an autogenerated index)
        public TreeSpeciesSet? CurrentSpeciesSet { get; private set; } // get species set on current pos

        // soil parameters not currently supported in environment file
        public float AnnualNitrogenDeposition { get; private set; }
        public float SoilLeaching { get; private set; }
        public float SoilQb { get; private set; }
        public bool UseDynamicAvailableNitrogen { get; private set; } // if true, iLand utilizes the soil-model N for species responses (and the dynamically calculated N available?)

        // soil parameters which obtain defaults from the project file but can be overridden in the environment file
        public float CurrentSnagOtherCarbon { get; private set; }
        public float CurrentSnagOtherCNRatio { get; private set; }
        public float CurrentSnagCarbon { get; private set; }
        public float CurrentSnagCNRatio { get; private set; }
        public float CurrentSnagsPerResourceUnit { get; private set; }
        public float CurrentSnagDecompositionRate { get; private set; }
        public float CurrentSnagHalfLife { get; private set; }

        public float CurrentSoilAvailableNitrogen { get; private set; }
        public float CurrentSoilDepth { get; private set; }
        public float CurrentSoilEr { get; private set; }
        public float CurrentSoilEl { get; private set; }
        public float CurrentSoilLeaching { get; private set; }
        public float CurrentSoilHumificationRate { get; private set; }
        public float CurrentSoilOrganicC { get; private set; }
        public float CurrentSoilOrganicDecompositionRate { get; private set; }
        public float CurrentSoilOrganicN { get; private set; }
        public float CurrentSoilQh { get; private set; }
        public float CurrentSoilSand { get; private set; }
        public float CurrentSoilSilt { get; private set; }
        public float CurrentSoilClay { get; private set; }
        public float CurrentSoilYoungLabileC { get; private set; }
        public float CurrentSoilYoungLabileDecompositionRate { get; private set; }
        public float CurrentSoilYoungLabileN { get; private set; }
        public float CurrentSoilYoungRefractoryC { get; private set; }
        public float CurrentSoilYoungRefractoryDecompositionRate { get; private set; }
        public float CurrentSoilYoungRefractoryN { get; private set; }

        public GisGrid GisGrid { get; init; }
        public Dictionary<string, TreeSpeciesSet> SpeciesSetsByTableName { get; init; } // created species sets

        public EnvironmentReader()
        {
            this.isGridMode = false;
            this.resourceUnitEnvironmentFile = null;
            this.rowIndexByCoordinateOrID = new Dictionary<string, int>();

            this.ClimatesByName = new Dictionary<string, World.Climate>();
            this.CurrentResourceUnitID = 0;
            this.CurrentSpeciesSet = null;
            this.GisGrid = new GisGrid();
            this.SpeciesSetsByTableName = new Dictionary<string, TreeSpeciesSet>();
        }

        public void LoadFromProjectAndEnvironmentFile(Project projectFile)
        {
            string environmentFilePath = projectFile.GetFilePath(ProjectDirectory.Home, projectFile.Model.World.EnvironmentFile); // TODO: stop requiring gis\ prefix in project file

            this.resourceUnitEnvironmentFile = new CsvFile();
            this.resourceUnitEnvironmentFile.LoadFile(environmentFilePath);
            if (resourceUnitEnvironmentFile.RowCount < 2)
            {
                throw new NotSupportedException("Input file '" + environmentFilePath + "' is empty or has only headers.");
            }
            this.columnNames = resourceUnitEnvironmentFile.ColumnNames;

            this.rowIndexByCoordinateOrID.Clear();
            this.ClimatesByName.Clear();
            this.CurrentResourceUnitID = 0;
            this.SpeciesSetsByTableName.Clear();

            if (isGridMode)
            {
                int idIndex = resourceUnitEnvironmentFile.GetColumnIndex("id");
                if (idIndex < 0)
                {
                    throw new NotSupportedException("Input file has no 'id' column!");
                }
                for (int rowIndex = 0; rowIndex < resourceUnitEnvironmentFile.RowCount; ++rowIndex)
                {
                    rowIndexByCoordinateOrID[resourceUnitEnvironmentFile.GetValue(idIndex, rowIndex).ToString()] = rowIndex;
                }
            }
            else
            {
                // ***  Matrix mode ******
                // each row must contain 'x' and 'y' coordinates
                // setup coordinates (x,y)
                int xIndex = resourceUnitEnvironmentFile.GetColumnIndex("x");
                int yIndex = resourceUnitEnvironmentFile.GetColumnIndex("y");
                if (xIndex < 0 || yIndex < 0)
                {
                    throw new NotSupportedException("Input file must have x and y columns.");
                }
                for (int rowIndex = 0; rowIndex < resourceUnitEnvironmentFile.RowCount; ++rowIndex)
                {
                    string key = String.Format("{0}_{1}", resourceUnitEnvironmentFile.GetValue(xIndex, rowIndex).ToString(), resourceUnitEnvironmentFile.GetValue(yIndex, rowIndex).ToString());
                    rowIndexByCoordinateOrID[key] = rowIndex;
                }
            }

            // default snag parameters which can be overridden in environment file
            this.CurrentSnagOtherCarbon = projectFile.Model.Initialization.Snags.OtherCarbon;
            this.CurrentSnagOtherCNRatio = projectFile.Model.Initialization.Snags.OtherCarbonNitrogenRatio;
            this.CurrentSnagCarbon = projectFile.Model.Initialization.Snags.StandingCarbon;
            this.CurrentSnagCNRatio = projectFile.Model.Initialization.Snags.StandingCarbonNitrogenRatio;
            this.CurrentSnagsPerResourceUnit = projectFile.Model.Initialization.Snags.SnagsPerResourceUnit;
            this.CurrentSnagDecompositionRate = projectFile.Model.Initialization.Snags.StandingDecompositionRate;  // TODO: also in species table
            this.CurrentSnagHalfLife = projectFile.Model.Initialization.Snags.SnagHalfLife; // TODO: also in species table

            // soil parameters not currently supported in environment file
            this.AnnualNitrogenDeposition = projectFile.Model.Settings.DefaultSoil.NitrogenDeposition;
            this.SoilLeaching = projectFile.Model.Settings.DefaultSoil.Leaching;
            this.SoilQb = projectFile.Model.Settings.DefaultSoil.Qb;
            this.UseDynamicAvailableNitrogen = projectFile.Model.Settings.DefaultSoil.UseDynamicAvailableNitrogen;

            // default soil parameters which can be overridden in environment file
            this.CurrentSoilEl = projectFile.Model.Settings.DefaultSoil.El;
            this.CurrentSoilEr = projectFile.Model.Settings.DefaultSoil.Er;
            this.CurrentSoilLeaching = projectFile.Model.Settings.DefaultSoil.Leaching;

            // default soil parameters specified in <site> rather than in <defaultSoil>
            // parameters used by resource unit soil
            this.CurrentSoilAvailableNitrogen = projectFile.Model.Site.AvailableNitrogen;
            this.CurrentSoilDepth = projectFile.Model.Site.SoilDepth;
            this.CurrentSoilHumificationRate = projectFile.Model.Site.SoilHumificationRate;
            this.CurrentSoilOrganicC = projectFile.Model.Site.SoilOrganicMatterCarbon;
            this.CurrentSoilOrganicDecompositionRate = projectFile.Model.Site.SoilOrganicMatterDecompositionRate;
            this.CurrentSoilOrganicN = projectFile.Model.Site.SoilOrganicMatterNitrogen;
            this.CurrentSoilQh = projectFile.Model.Settings.DefaultSoil.Qh;
            this.CurrentSoilYoungLabileC = projectFile.Model.Site.YoungLabileCarbon;
            this.CurrentSoilYoungLabileDecompositionRate = projectFile.Model.Site.YoungLabileDecompositionRate; // also in species table
            this.CurrentSoilYoungLabileN = projectFile.Model.Site.YoungLabileNitrogen;
            this.CurrentSoilYoungRefractoryC = projectFile.Model.Site.YoungRefractoryCarbon;
            this.CurrentSoilYoungRefractoryDecompositionRate = projectFile.Model.Site.YoungRefractoryDecompositionRate; // also in species table
            this.CurrentSoilYoungRefractoryN = projectFile.Model.Site.YoungRefractoryNitrogen;
            // parameters used by resource unit water cycle
            this.CurrentSoilSand = projectFile.Model.Site.PercentSand;
            this.CurrentSoilSilt = projectFile.Model.Site.PercentSilt;
            this.CurrentSoilClay = projectFile.Model.Site.PercentClay;

        // species sets
        int speciesTableNameIndex;
            if ((speciesTableNameIndex = columnNames.IndexOf(Constant.Setting.SpeciesTable)) > -1)
            {
                //using DebugTimer t = model.DebugTimers.Create("Environment.LoadFromString(species)");
                List<string> uniqueSpeciesSetNames = resourceUnitEnvironmentFile.GetColumnValues(speciesTableNameIndex).Distinct().ToList();
                //Debug.WriteLine("Environment: Creating " + uniqueSpeciesSetNames + " species sets.");
                foreach (string setName in uniqueSpeciesSetNames)
                {
                    //model.GlobalSettings.Settings.SetParameter(Constant.Setting.SpeciesTable, name); // set xml value
                    // create species sets
                    TreeSpeciesSet speciesSet = new TreeSpeciesSet(setName);
                    speciesSet.Setup(projectFile);

                    if (this.CurrentSpeciesSet == null)
                    {
                        this.CurrentSpeciesSet = speciesSet;
                    }
                    this.SpeciesSetsByTableName.Add(setName, speciesSet);
                }
            }
            else
            {
                // no species sets specified
                TreeSpeciesSet defaultSpeciesSet = new TreeSpeciesSet("species");
                defaultSpeciesSet.Setup(projectFile);
                this.CurrentSpeciesSet = defaultSpeciesSet;
                this.SpeciesSetsByTableName.Add(defaultSpeciesSet.SqlTableName, defaultSpeciesSet);
            }

            // climates
            if (columnNames.IndexOf(Constant.Setting.Climate.Name) == -1)
            {
                // no named climates defined: create a single default climate
                World.Climate defaultClimate = new World.Climate("default");
                defaultClimate.Setup(projectFile);
                ClimatesByName.Add(defaultClimate.Name, defaultClimate);
                CurrentClimate = defaultClimate;
            }
            // otherwise, instantiate named climates as needed
        }

        /** sets the "pointer" to a "position" (metric coordinates).
            All specified values are set (also the climate/species-set pointers).
            */
        public void SetPosition(Project projectFile, PointF ruGridCellPosition)
        {
            // no changes occur, when the "environment" is not loaded
            if ((this.columnNames == null) || (this.resourceUnitEnvironmentFile == null))
            {
                throw new NotSupportedException("SetPosition() called before environment file loaded.");
            }

            string key;
            if (this.isGridMode)
            {
                // grid mode
                int ruID = (int)this.GisGrid.GetValue(ruGridCellPosition);
                this.CurrentResourceUnitID = ruID;
                key = ruID.ToString();
                if (ruID == -1)
                {
                    return; // no data for the resource unit
                }
                if (rowIndexByCoordinateOrID.ContainsKey(key) == false)
                {
                    throw new ArgumentOutOfRangeException(nameof(ruGridCellPosition), String.Format("Resource unit {0} (position ({1}, {2}) m) not found in environment file.", ruID, ruGridCellPosition.X, ruGridCellPosition.Y));
                }
            }
            else
            {
                // access data in the matrix by resource unit indices
                int indexX = (int)(ruGridCellPosition.X / Constant.RUSize);
                int indexY = (int)(ruGridCellPosition.Y / Constant.RUSize);
                ++this.CurrentResourceUnitID; // to have Ids for each resource unit

                key = String.Format("{0}_{1}", indexX, indexY);
                if (rowIndexByCoordinateOrID.ContainsKey(key) == false)
                {
                    throw new FileLoadException(String.Format("Resource unit not found at coordinates {0}, {1} in environment file (physical position {2}, {3} m).", indexX, indexY, ruGridCellPosition.X, ruGridCellPosition.Y));
                }
            }

            int rowIndex = rowIndexByCoordinateOrID[key];
            List<string> row = this.resourceUnitEnvironmentFile.GetRow(rowIndex);
            for (int columnIndex = 0; columnIndex < resourceUnitEnvironmentFile.ColumnCount; ++columnIndex)
            {
                if (String.Equals(this.columnNames[columnIndex], "id", StringComparison.Ordinal))
                {
                    this.CurrentResourceUnitID = Int32.Parse(row[columnIndex]);
                    continue;
                }
                // ignore "x" and "y" keys
                if (String.Equals(this.columnNames[columnIndex], "x", StringComparison.Ordinal) || String.Equals(this.columnNames[columnIndex], "y", StringComparison.Ordinal))
                {
                    continue;
                }

                string value = row[columnIndex];
                //if (model.GlobalSettings.LogDebug())
                //{
                //    Debug.WriteLine("Environment: set global parameter " + columnNames[columnIndex] + " to " + value);
                //}
                //model.GlobalSettings.Settings.SetXmlNodeValue(columnNames[columnIndex], value);
                // special handling for constructed objects:
                switch (columnNames[columnIndex])
                {
                    case Constant.Setting.SpeciesTable:
                        this.CurrentSpeciesSet = this.SpeciesSetsByTableName[value];
                        break;
                    case Constant.Setting.Climate.Name:
                        if (this.ClimatesByName.TryGetValue(value, out World.Climate? climate) == false)
                        {
                            // create only those climate sets that are really used in the current landscape
                            climate = new World.Climate(value);
                            climate.Setup(projectFile);
                            this.ClimatesByName.Add(climate.Name, climate);
                        }
                        this.CurrentClimate = climate;
                        break;
                    case Constant.Setting.Snag.OtherC:
                        this.CurrentSnagOtherCarbon = Single.Parse(value);
                        break;
                    case Constant.Setting.Snag.OtherCN:
                        this.CurrentSnagOtherCNRatio = Single.Parse(value);
                        break;
                    case Constant.Setting.Snag.StandingWoodyCarbon:
                        this.CurrentSnagCarbon = Single.Parse(value);
                        break;
                    case Constant.Setting.Snag.StandingWoodyCNRatio:
                        this.CurrentSnagCNRatio = Single.Parse(value);
                        break;
                    case Constant.Setting.Snag.StandingWoodyDecompositionRate:
                        this.CurrentSnagDecompositionRate = Single.Parse(value);
                        break;
                    case Constant.Setting.Snag.StandingWoodyHalfLife:
                        this.CurrentSnagHalfLife = Single.Parse(value);
                        break;
                    case Constant.Setting.Snag.StandingWoodyCount:
                        this.CurrentSnagsPerResourceUnit = Single.Parse(value);
                        break;
                    case Constant.Setting.Soil.AvailableNitrogen:
                        this.CurrentSoilAvailableNitrogen = Single.Parse(value);
                        break;
                    case Constant.Setting.Soil.Depth:
                        this.CurrentSoilDepth = Single.Parse(value);
                        break;
                    case Constant.Setting.Soil.El:
                        this.CurrentSoilEl = Single.Parse(value);
                        break;
                    case Constant.Setting.Soil.Er:
                        this.CurrentSoilEr = Single.Parse(value);
                        break;
                    case Constant.Setting.Soil.Leaching:
                        this.CurrentSoilLeaching = Single.Parse(value);
                        break;
                    case Constant.Setting.Soil.HumificationRate:
                        this.CurrentSoilHumificationRate = Single.Parse(value);
                        break;
                    case Constant.Setting.Soil.OrganicMatterC:
                        this.CurrentSoilOrganicC = Single.Parse(value);
                        break;
                    case Constant.Setting.Soil.OrganicMatterDecompositionRate:
                        this.CurrentSoilOrganicDecompositionRate = Single.Parse(value);
                        break;
                    case Constant.Setting.Soil.OrganincMatterN:
                        this.CurrentSoilOrganicN = Single.Parse(value);
                        break;
                    case Constant.Setting.Soil.PercentClay:
                        this.CurrentSoilClay = Single.Parse(value);
                        break;
                    case Constant.Setting.Soil.PercentSand:
                        this.CurrentSoilSand = Single.Parse(value);
                        break;
                    case Constant.Setting.Soil.PercentSilt:
                        this.CurrentSoilSilt = Single.Parse(value);
                        break;
                    case Constant.Setting.Soil.Qh:
                        this.CurrentSoilQh = Single.Parse(value);
                        break;
                    case Constant.Setting.Soil.YoungLabileC:
                        this.CurrentSoilYoungLabileC = Single.Parse(value);
                        break;
                    case Constant.Setting.Soil.YoungLabileDecompositionRate:
                        this.CurrentSoilYoungLabileDecompositionRate = Single.Parse(value);
                        break;
                    case Constant.Setting.Soil.YoungLabileN:
                        this.CurrentSoilYoungLabileN = Single.Parse(value);
                        break;
                    case Constant.Setting.Soil.YoungRefractoryC:
                        this.CurrentSoilYoungRefractoryC = Single.Parse(value);
                        break;
                    case Constant.Setting.Soil.YoungRefractoryDecompositionRate:
                        this.CurrentSoilYoungRefractoryDecompositionRate = Single.Parse(value);
                        break;
                    case Constant.Setting.Soil.YoungRefractoryN:
                        this.CurrentSoilYoungRefractoryN = Single.Parse(value);
                        break;
                    default:
                        throw new NotSupportedException("Unhandled environment table column '" + columnNames[columnIndex] + "'.");
                }
            }
        }

        public bool SetGridMode(string gridFileName)
        {
            this.GisGrid.LoadFromFile(gridFileName);
            this.isGridMode = true;
            return true;
        }
    }
}
